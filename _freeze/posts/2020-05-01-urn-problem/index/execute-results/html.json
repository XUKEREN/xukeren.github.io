{
  "hash": "1ab5c97fee69769ecd24cf692a7031b0",
  "result": {
    "markdown": "---\ntitle: Urn Problem\ndescription: \"an idealized mental exercise\"\ndate: '2020-05-01'\ncategories:\n  - notes\n  - r\n---\n\n\n![](https://upload.wikimedia.org/wikipedia/commons/5/5b/Stochastik_Bayestheorem_Urnenversuch.png)\n\n\n\n\n\nLoad packages  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(knitr)\n```\n:::\n\n\nImaging we want to draw balls from an Urn. Balls are with different colors. Each color has a ‘weight’. When we draw a ball, a given ball is chosen with probability equal to (Weight of that ball)/(total weight of all balls in the Urn).        \n\nNow there are two red balls and one black ball in the urn. If we draw a nonblack ball, we return that ball to urn along with another ball with same color. If we draw a black ball, we return that ball to urn along with another ball that has a color that has not appeared in the urn. Repeat ball drawing process until we have 50 nonblack balls. We repeat this process several times.  Assuming all nonblack balls have weight one.  Now we want to know the expected number of differnet non black colors in the urn at the end, and the distribution of the numbers of nonblack colors at the end.     \n\nFirst, I wrote an urn function which takes four arguements. First one is the number of colors in the urn at start, second one is the initial number of balls in the urn, the third one represents the number of nonblack balls in the end, and the last one is the weight of the black ball.      \n\nUrn problem wiki page [link](https://en.wikipedia.org/wiki/Urn_problem)   \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set the random number seed\nset.seed(16)\n\n# Now write a function to simulate the Urn model\n\nUrnSim <- function(NumberOfColorsInUrnAtStart, InitialNBalls, NonBlackBalls, weightofblackball) {\n  # set up the initial state of the urn\n  Urn <- rep(NA, NonBlackBalls + 1)\n  NumberOfColorsUsed <- NumberOfColorsInUrnAtStart\n\n  # we will start with three balls: two \"red\" and one \"black\"\n  # black = 0 and red = 1\n  Urn[1] <- 0\n  Urn[2] <- 1\n  Urn[3] <- 1\n\n  # set up a counter (NumberOfBalls) to keep track of how many balls we have\n  NumberOfBalls <- sum(Urn >= 0, na.rm = TRUE)\n\n  # set-up a loop that pulls a ball from the urn and takes the appropriate action\n  while (NumberOfBalls < (NonBlackBalls + 1)) {\n\n    # set the probability of draw each ball\n    myprob <- c(\n      weightofblackball / (weightofblackball + NumberOfBalls - 1),\n      rep(1 / (weightofblackball + NumberOfBalls - 1), NumberOfBalls - 1)\n    )\n\n    # draw a ball (WhichBall)\n    WhichBall <- Urn[sample(1:NumberOfBalls, size = 1, prob = myprob)]\n\n    # if draw a black ball\n    if (WhichBall == 0) {\n      WhichBall_nonblack <- Urn[sample(2:NumberOfBalls, 1)]\n      # return the ball and change the one's color\n      # the number of color that we have used should be increased\n      # but it does not necessarily mean that the number of colors in our urn has increased\n      NumberOfColorsUsed <- NumberOfColorsUsed + 1\n      # put back that ball with changed color\n      Urn[NumberOfBalls] <- NumberOfColorsUsed\n      # the number of balls did not change\n      NumberOfBalls <- NumberOfBalls\n    } else {\n      # draw a ball which is not black  (whichBall)\n      # return the ball and add another one like it\n      Urn[NumberOfBalls + 1] <- WhichBall\n      # increase the counter of how many balls we have in the urn\n      NumberOfBalls <- NumberOfBalls + 1\n    }\n  }\n  Numberofnonblackcolors <- length(unique(Urn)) - 1\n  Numberofballsofcommonestcolor <- max(table(Urn))\n  distribution <- table(Urn)\n  list(\n    Numberofnonblackcolors = Numberofnonblackcolors,\n    Numberofballsofcommonestcolor = Numberofballsofcommonestcolor,\n    distribution = distribution\n  )\n}\n\n# test the function\nUrnSim(2, 3, 50, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Numberofnonblackcolors\n[1] 6\n\n$Numberofballsofcommonestcolor\n[1] 20\n\n$distribution\nUrn\n 0  1  3  4  5  6  7 \n 1 13 20  1  7  5  4 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nweight <- c(1:10)\n\nmylist <- weight %>% map(function(x) {\n  NumTrials <- 10000 # how many urns to simulate\n  TrialResults <- rep(0, NumTrials) # somewhere to put the results\n  for (i in 1:length(TrialResults)) {\n    TrialResults[i] <- UrnSim(2, 3, 50, x)$Numberofnonblackcolors\n  }\n  mean(TrialResults)\n})\n\ndf <- data.frame(weight = c(1:10), Numberofnonblackcolors = mylist %>% unlist())\n\ndf %>% kable()\n```\n\n::: {.cell-output-display}\n| weight| Numberofnonblackcolors|\n|------:|----------------------:|\n|      1|                 3.9625|\n|      2|                 6.3618|\n|      3|                 8.4013|\n|      4|                10.0654|\n|      5|                11.6262|\n|      6|                12.9812|\n|      7|                14.3008|\n|      8|                15.4330|\n|      9|                16.4470|\n|     10|                17.4720|\n:::\n\n```{.r .cell-code}\nggplot(df, aes(x = weight, y = Numberofnonblackcolors)) +\n  geom_point() +\n  theme_minimal() +\n  geom_smooth(se = FALSE) +\n  scale_x_continuous(breaks = seq(1, 10, 1)) +\n  labs(title = \"the expected number of different (non-black) colors in the Urn \\n  at the end as a function of the weight of the black ball\", x = \"weight of black ball\", y = \"different (non-black) colors  \\n (mean of 10000 simulations)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}